{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/technical/why-not-fork-bungeecord/","result":{"data":{"markdownRemark":{"html":"<p>This article is a bit complex. This article really answers four questions that are inter-related\nand very frequently asked:</p>\n<ul>\n<li><em>Does Velocity support BungeeCord plugins?</em> (The short answer to this is no.)</li>\n<li><em>Why doesn't Velocity support BungeeCord plugins?</em> (A full explanation for this one will follow.)</li>\n<li><em>Why would you even consider making a clean break from BungeeCord?</em></li>\n<li><em>What is Velocity's purpose? Why should I use it?</em></li>\n</ul>\n<p>To answer all four questions, we need to consider historical context. This draws upon my (Tux's)\npersonal experience as a former contributor to BungeeCord and as the founder of the Waterfall and Velocity\nprojects.</p>\n<h2>Why is Velocity better?</h2>\n<p>First, let's answer the last two questions, as they're some of the most pertinent to the discussion.</p>\n<h3>Improved performance</h3>\n<p>High performance has been a goal of the Velocity project since day 1. We have made several design decisions that have\nallowed us to improve performance.</p>\n<ul>\n<li>No entity ID rewriting is done. This decision, although initially made for simplicity, also improves performance (since\nthe proxy has to do little extra work) and improves mod compatibility.</li>\n<li>We carefully optimized packet handling to reduce wasteful work done by the proxy from packets that pass through the\nproxy unmodified.</li>\n<li>We use <a href=\"https://github.com/ebiggers/libdeflate\">a compression library</a> with more than 2x better compression\nspeed than regular zlib, which is used by BungeeCord to compress packets to the client.</li>\n<li>We've gone down deep, making modifications to improve the job that Java does in compiling the proxy code for higher\nperformance.</li>\n<li>We have far more freedom to make performance improvements \"under the hood\" compared to BungeeCord due to different\nversioning and internal stability policies.</li>\n<li>In case the speed provided out-of-the-box is not good enough, you can easily tweak several performance-related settings\nin <code class=\"language-text\">velocity.toml</code>.</li>\n</ul>\n<p>In any event, all of this boils down to Velocity being able to get more out of the hardware you give it. The takeaway is\nthat Velocity uses less memory and CPU whilst increasing proxy throughput.</p>\n<h3>Improved security</h3>\n<p>Another goal of the Velocity project from day 1 has been a focus on security. Velocity's emphasis on security includes\nusing a safe programming language (Java), limiting the use of unsafe C code, and a proactive approach to closing potential\navenues to denial-of-service attacks.</p>\n<p>Some security innovations of the Velocity project include:</p>\n<ul>\n<li>Improved player info forwarding for Minecraft 1.13+ that requires the server and proxy to know a pre-arranged\nkey.</li>\n<li>Full, unobtrusive, easily-maintainable patches for \"proxy crashing\" exploits</li>\n</ul>\n<h3>Best-in-class modding support</h3>\n<p>Velocity is fully compatible with Minecraft Forge (1.7 through 1.12.2) and Fabric and actively works with the wider Minecraft\nmodding community.</p>\n<h2>So why did you make a new proxy?</h2>\n<p>Here were the immediate reasons, briefly summarized:</p>\n<ul>\n<li>BungeeCord was very conservative with regard to API changes, especially after August 2014\n(the EULA debacle)</li>\n<li>BungeeCord is actively hostile to continued support for Minecraft modding</li>\n<li>Waterfall, while an improvement on BungeeCord, must still retain full BungeeCord compatibility\nand thus cannot make fundamental changes to improve performance and stability without breaking\ncompatibility with BungeeCord</li>\n<li>My own personal experience with the BungeeCord API left a lot of improvements to be desired,\nsome which would require breaking changes</li>\n<li>Finally, in part, it was an educational project - I wanted to prove that it was really possible\nto make a highly scalable Minecraft proxy in Java that was demonstrably better than BungeeCord</li>\n</ul>\n<h2>What's wrong with BungeeCord?</h2>\n<h3>API conservatism</h3>\n<h3>Hostility to the Minecraft modding community</h3>\n<h2>Why couldn't you have contributed to Waterfall instead?</h2>\n<p>I could have - in fact, I have. Prior to starting the Velocity project, I was involved in the Waterfall\nproject from January 2016 to May 2017.</p>\n<h2>Okay, so what does Velocity improve upon?</h2>\n<hr>\n<h2>The History</h2>\n<h3>In The Beginning...</h3>\n<p>In the beginning, there was BungeeCord. The first-ever commit to the BungeeCord repository\nwas made <a href=\"https://github.com/SpigotMC/BungeeCord/commit/b876fb2e1bd395c37f47b020c2f0e778812c0c61\">October 4, 2012</a>.</p>\n<p>BungeeCord essentially launched the modern-day Minecraft network (essentially all large Minecraft\nservers after 2012 were a collection of servers linked into one by a proxy).</p>\n<p>My first experience with BungeeCord was in August 2013. At this time, BungeeCord was not yet\nmaturing - it was still under heavy development. This was the environment upon which my best-known\nplugin, RedisBungee, was born into. The game rapidly changed during this time.</p>\n<h3>Then Wesley Struck...</h3>\n<p>Then something big happened. The Bukkit DMCA saga has been told elsewhere, but the aftermath of\nit is that Spigot started maintaining CraftBukkit, and effectively became its own upstream. This\nwas combined with the purchase of Mojang by Microsoft.</p>\n<p>This was a turning point for just about everyone, and while it's hard to pin down the real cause,\nI think this was at least a significant contributing factor to the current conservatism of\nSpigot and BungeeCord, despite major internal updates to the game (especially Minecraft 1.13).\nSince the release of Spigot 1.8, Spigot and BungeeCord have made at best minor breaking API changes.</p>\n<h3>A Waterfall Springs Forth</h3>\n<p>In January 2016, something snapped. I had a bunch of unmerged pull requests for BungeeCord\n(some of which still remain unmerged to this day). I decided that it was time to make a fork\nof BungeeCord which would act more quickly, add features, and improve upon BungeeCord. From there,\nWaterfall emerged as a fork of BungeeCord. I was instrumental during its first year of existence.</p>\n<p>While Waterfall has made many patches to improve BungeeCord, it is ultimately hemmed in by the\nfact that it is based on BungeeCord and users have the expectation of full BungeeCord compatibility.\nTo provide one example, <a href=\"https://github.com/PaperMC/Waterfall/commit/c8eb6aec7bac82fd309fa6d6113b8a0418317b01\">Waterfall added support for chat components for 1.13</a>\nbut later <a href=\"https://github.com/PaperMC/Waterfall/commit/e910db4871210f03efd8e43b67400745f7b9961b\">removed it due to compatibility issues</a>.</p>\n<h3>The Adventure Towards High Velocity</h3>\n<p>In May 2017, I finally thought I'd call it quits. I was already involved in the community for\n4 years, and was starting college that fall.</p>\n<p>During that time I got dragged in again, to the point where I came out of retirement not long\nafter.</p>\n<h2>Okay, But <em>What</em> Does Velocity Do Differently?</h2>\n<p>You've made it to the other side (or perhaps you skipped ahead). Now, let's talk about <em>what</em>\nVelocity does differently, so we can answer the last two questions.</p>","frontmatter":{"title":"Why Not Fork BungeeCord?"},"excerpt":"This article is a bit complex. This article really answers four questions that are inter-related\nand very frequently asked: Does Velocityâ€¦"}},"pageContext":{"slug":"/technical/why-not-fork-bungeecord/"}}}