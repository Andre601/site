{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/technical/what-does-velocity-do-for-me/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"What Does Velocity Do For Me?\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"There are many reasons why you should consider Velocity for your next proxy setup.\"), mdx(\"h2\", null, \"Improved performance\"), mdx(\"p\", null, \"High performance has been a goal of the Velocity project since day 1. We have made several design decisions that have\\nallowed us to improve performance.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No entity ID rewriting is done. This decision, although initially made for simplicity, also improves performance (since\\nthe proxy has to do little extra work) and improves mod compatibility.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We carefully optimized packet handling to reduce wasteful work done by the proxy from packets that pass through the\\nproxy unmodified.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We use \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/ebiggers/libdeflate\"\n  }), \"a compression library\"), \" with more than 2x better compression\\nspeed than regular zlib.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We've gone down deep, making modifications to improve the job that Java does in compiling the proxy code for higher\\nperformance.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have far more freedom to make performance improvements \\\"under the hood\\\" compared to BungeeCord due to different\\nversioning and internal stability policies.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In case the speed provided out-of-the-box is not good enough, you can easily tweak several performance-related settings\\nin \", mdx(\"code\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"velocity.toml\"), \".\")), mdx(\"p\", null, \"In any event, all of this boils down to Velocity being able to get more out of the hardware you give it. The takeaway is\\nthat Velocity uses less memory and CPU whilst increasing proxy throughput.\"), mdx(\"h3\", null, \"Comparison to BungeeCord / Waterfall\"), mdx(\"p\", null, \"BungeeCord must retain backwards compatibility with almost every plugin developed for it, going as far back as 2012.\\nIn addition, it does not implement any of the optimizations Velocity has made.\"), mdx(\"h2\", null, \"Improved security\"), mdx(\"p\", null, \"Another goal of the Velocity project from day 1 has been a focus on security. Velocity's emphasis on security includes\\nusing a safe programming language (Java), limiting the use of unsafe C code, and a proactive approach to closing potential\\navenues to denial-of-service attacks.\"), mdx(\"p\", null, \"Some security innovations of the Velocity project include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Improved player info forwarding for Minecraft 1.13+ that requires the server and proxy to know a pre-arranged\\nkey.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full, unobtrusive, easily-maintainable patches for \\\"proxy crashing\\\" exploits\")), mdx(\"h3\", null, \"Comparison to BungeeCord / Waterfall\"), mdx(\"p\", null, \"While \\\"proxy crashing\\\" exploits are fixed in BungeeCord and Waterfall, Velocity modern forwarding is unique\\nto Velocity and provides a safe, mod-friendly solution to player info forwarding.\"), mdx(\"h2\", null, \"Best-in-class modding support\"), mdx(\"p\", null, \"Velocity is fully compatible with Minecraft Forge (1.7 through 1.12.2) and Fabric and actively works with the wider Minecraft\\nmodding community.\"), mdx(\"h3\", null, \"Comparison to BungeeCord / Waterfall\"), mdx(\"p\", null, \"BungeeCord does not support Forge past 1.12.2 and Forge support has been neglected in BungeeCord. Waterfall does maintain\\nForge support and is a viable option in case you need to use legacy BungeeCord plugins.\"), mdx(\"h2\", null, \"So why did you make a new proxy?\"), mdx(\"p\", null, \"Here were the immediate reasons, briefly summarized:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BungeeCord was very conservative with regard to API changes, especially after August 2014\\n(the EULA debacle)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"BungeeCord is actively hostile to continued support for Minecraft modding\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Waterfall, while an improvement on BungeeCord, must still retain full BungeeCord compatibility\\nand thus cannot make fundamental changes to improve performance and stability without breaking\\ncompatibility with BungeeCord\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"My own personal experience with the BungeeCord API left a lot of improvements to be desired,\\nsome which would require breaking changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finally, in part, it was an educational project - I wanted to prove that it was really possible\\nto make a highly scalable Minecraft proxy in Java that was demonstrably better than BungeeCord\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"What Does Velocity Do For Me?"},"excerpt":"There are many reasons why you should consider Velocity for your next proxy setup. Improved performance High performance has been a goal ofâ€¦"}},"pageContext":{"slug":"/technical/what-does-velocity-do-for-me/"}},"staticQueryHashes":["63159454"]}