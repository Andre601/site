{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/developers/listener/","result":{"data":{"markdownRemark":{"html":"<p>Listening to events with Velocity's <code class=\"language-text\">@Subscribe</code> annotation is straightforward. You've already seen one such listener, using the ProxyInitializeEvent in your main class.</p>\n<h3>Adding listening methods</h3>\n<p>To listen to an event, mark the method with <code class=\"language-text\">@Subscribe</code>, like shown. This works similarly to annotation-driven event listening\nin other APIs you may be familiar with; it's the equivalent of Bukkit's/Bungee's @EventHandler and Sponge's @Listener.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Subscribe</span><span class=\"token punctuation\">(</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPlayerChat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayerChatEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do stuff</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div>\n<div class=\"caution-header\">\n    <img src=\"https://cdn.discordapp.com/attachments/734487433621668011/736277965142491276/warning_icon.png\"></img>\n     Caution\n</div>\n  <div class=\"caution\">\n      Note well that the import is `com.velocitypowered.api.event.Subscribe` and *NOT* in `com.google.common.eventbus`.\n  </div>\n</div>\n<p>** Orders **</p>\n<p>Every listener has a <code class=\"language-text\">PostOrder</code>. When an event is fired, the order in which listeners are invoked is defined by their <code class=\"language-text\">PostOrder</code>. Listeners using\n<code class=\"language-text\">PostOrder.FIRST</code> are called first, then EARLY, NORMAL, etc.</p>\n<p>State the desired order in the <code class=\"language-text\">@Subscribe</code> annotation:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Subscribe</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">=</span> <span class=\"token class-name\">PostOrder</span><span class=\"token punctuation\">.</span>NORMAL<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPlayerChat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayerChatEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// do stuff</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>NORMAL is the default value if you do not specify an order.</p>\n<h3>Registering listeners</h3>\n<p>While your main plugin class is automatically registered, you will need to register with the EventManager any other listeners you have:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">server<span class=\"token punctuation\">.</span><span class=\"token function\">getEventManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>plugin<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Both parameters are <code class=\"language-text\">Object</code>, first the instance of your plugin, second the listener to register. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Plugin</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"myfirstplugin\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"My Plugin\"</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span> dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token annotation punctuation\">@Dependency</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"wonderplugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTest</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProxyServer</span> server<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token annotation punctuation\">@Inject</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">VelocityTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyServer</span> server<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token annotation punctuation\">@Subscribe</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onInitialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyInitializeEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">getEventManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyListener</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@Subscribe</span><span class=\"token punctuation\">(</span>order <span class=\"token operator\">=</span> <span class=\"token class-name\">PostOrder</span><span class=\"token punctuation\">.</span>EARLY<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPlayerChat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PlayerChatEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// do something here</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>An Alternative Approach</h3>\n<p>As an alternative to <code class=\"language-text\">@Subscribe</code>, you can also use the functional <code class=\"language-text\">EventHandler</code> interface and register yours with\n<code class=\"language-text\">register(Object plugin, Class&lt;E&gt; eventClass, EventHandler&lt;E&gt; handler)</code></p>\n<h2>Creating Events</h2>\n<p>Creating events on Velocity is somewhat different than on other platforms. However, it is very similar for the most part.</p>\n<h3>Creating the Event Class</h3>\n<p>First we need to create a class for our event. In this tutorial we'll assume you're making a private messaging plugin, and thus use\na <code class=\"language-text\">PrivateMessageEvent</code>. Most of this part is boilerplate.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrivateMessageEvent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Player</span> sender<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Player</span> recipient<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrivateMessageEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Player</span> recipient<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sender <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>recipient <span class=\"token operator\">=</span> recipient<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span> <span class=\"token function\">getSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span> <span class=\"token function\">getRecipient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> recipient<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token comment\">// toString, equals, and hashCode may be added as needed</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You'll notice that your events don't need to extend or implement anything. They just work.</p>\n<h3>Firing the Event</h3>\n<p>To fire the event, you'll need to get the server's event manager and use the <code class=\"language-text\">fire</code> method. Note that this returns a <code class=\"language-text\">CompletableFuture</code>, so if you want to continue logic after the event is handled by all listeners, use a callback:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">server<span class=\"token punctuation\">.</span><span class=\"token function\">getEventManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PrivateMessageEvent</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> recipient<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">thenAccept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// event has finished firing</span>\n  <span class=\"token comment\">// do some logic dependent on the result</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Using ResultedEvent</h3>\n<p>Velocity uses the generalised <code class=\"language-text\">ResultedEvent</code> for events which have some sort of 'result'. The result type of the event is defined by its generic type; for example, <code class=\"language-text\">PrivateMessageEvent implements ResultedEvent&lt;ResultType&gt;</code>.</p>\n<p>Some common result types are <code class=\"language-text\">GenericResult</code>, for simple allowed/denied results, and component results, used for events where the result may be denied with an accompanying reason (such as in a login event).</p>\n<p>Using a general result is far more encompassing than <code class=\"language-text\">isCancelled/setCancelled</code> methods you may be used to on other platforms, whose meaning is vague and limited to a simple boolean. In this example, we'll use <code class=\"language-text\">GenericResult</code>, so listeners will be able to mark our <code class=\"language-text\">PrivateMessageEvent</code> as either allowed or denied.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PrivateMessageEvent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ResultedEvent</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">GenericResult</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Player</span> sender<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Player</span> recipient<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">GenericResult</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">GenericResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">allowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Allowed by default</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">PrivateMessageEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Player</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Player</span> recipient<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sender <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>recipient <span class=\"token operator\">=</span> recipient<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span> <span class=\"token function\">getSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span> <span class=\"token function\">getRecipient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> recipient<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">GenericResult</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericResult</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Per convention, the result of a <code class=\"language-text\">ResultedEvent</code> should never be null. Here, we assure that using <code class=\"language-text\">Objects.requireNonNull</code>.</p>\n<p>Listeners may 'deny' the event by using <code class=\"language-text\">event.setResult(GenericResult.denied())</code>, and you may check the result\nwith <code class=\"language-text\">event.getResult()</code>.</p>","frontmatter":{"title":"Working With Events"},"excerpt":"Listening to events with Velocity's  annotation is straightforward. You've already seen one such listener, using the ProxyInitializeEvent in…"}},"pageContext":{"slug":"/developers/listener/"}}}