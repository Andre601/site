{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/developers/api-basics/","result":{"data":{"markdownRemark":{"html":"<hr>\n<h2>title: Velocity Plugin Basics</h2>\n<p>Now you will lay the groundwork for your plugin. This page will teach you the first things to do when creating\na Velocity plugin.</p>\n<h3>Create the plugin class</h3>\n<p>Create a new class (let's say <code class=\"language-text\">com.example.velocityplugin.VelocityTest</code>) and paste this in:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>velocityplugin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>inject</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Inject</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>plugin</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>proxy</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ProxyServer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>slf4j</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Logger</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Plugin</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"myfirstplugin\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"My First Plugin\"</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0-SNAPSHOT\"</span><span class=\"token punctuation\">,</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">\"awesome.org\"</span><span class=\"token punctuation\">,</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"I did it!\"</span><span class=\"token punctuation\">,</span> authors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Me\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProxyServer</span> server<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Inject</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">VelocityTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyServer</span> server<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello there! I made my first plugin with Velocity.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What did you just do there? There's quite a bit to unpack, so let's focus on the Velocity-specific bits:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Plugin(id = &quot;myfirstplugin&quot;, name = &quot;My First Plugin&quot;, version = &quot;0.1.0-SNAPSHOT&quot;,\n        url = &quot;awesome.org&quot;, description = &quot;I did it!&quot;, authors = {&quot;Me&quot;})\npublic class VelocityTest {</code></pre></div>\n<p>This tells Velocity that this class contains your plugin (myfirstplugin) so that it can be loaded once the proxy starts up.\nVelocity will detect where the plugin will reside when you compile your plugin.</p>\n<p>Moving on, what's this?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Inject</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">VelocityTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyServer</span> server<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello there, it's a test plugin I made!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This looks like magic! How is Velocity doing this? The answer lies in the <code class=\"language-text\">@Inject</code>, which indicates that Velocity should\ninject a ProxyServer and the Logger when constructing your plugin. These two interfaces will help you out as you begin\nworking with Velocity. We won't talk too much about dependency injection: all you need to know is that Velocity will\ndo this.</p>\n<p>All you need to do is build your plugin, put it in your <code class=\"language-text\">plugins/</code> directory, and try it! Isn't that nice? In the next\nsection you'll learn more about how to use the API.</p>\n<h3>Choosing <code class=\"language-text\">@Plugin</code> Information</h3>\n<p>Choose your plugin's ID wisely. Other plugins will use this ID to depend on yours. If you change it, you could break compatibility.</p>\n<p>The plugin name is somewhat less important. It will be shown to users as the display name of your plugin, but tweaking it will not be catastrophic.</p>\n<p>For the version, we recommend sticking to semantic versioning - you can read more about this concept at <a href=\"https://semver.org/\">semver.org</a>. Basically, use 3 numbers in your version, such as 1.4.25. Increment the major number when you make a backwards-incompatible breaking change, increment the minor number when you add functionality in a compatible manner, and increment the patch number when you fix a bug or make an otherwise unnoticeable change in the implementation.</p>\n<p>You can also describe your plugin's URL, authors, and description in your <code class=\"language-text\">@Plugin</code> annotation. Plugin dependencies are also be specified there, but we'll get to that later.</p>\n<h3>A word of caution</h3>\n<p>In Velocity, plugin loading is split into two steps: construction and initialization. The code in your plugin's\nconstructor is part of the construction phase. There is very little you can do safely during construction, especially as\nthe API does not specify which operations are safe to run during construction. Notably, you can't register an event\nlistener in your constructor, because you need to have a valid plugin registration, but Velocity can't register the\nplugin until the plugin has been constructed, causing a \"chicken or the egg\" problem.</p>\n<p>To break this vicious cycle, you should always wait for initialization, which is indicated when Velocity fires the ProxyInitializeEvent.\nWe can do things on initialization by adding a listener for this event, as shown below. Note that Velocity automatically\nregisters your plugin main class as a listener.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Subscribe</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onProxyInitialization</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyInitializeEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do some operation demanding access to the Velocity API here.</span>\n    <span class=\"token comment\">// For instance, we could register an event:</span>\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">getEventManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PluginListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Getting your Plugin's Directory</h3>\n<p>At some point you may need your plugin's directory. To do this, add <code class=\"language-text\">@DataDirectory Path dataDirectory</code> to your plugin's constructor\nparameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Path</span> dataDirectory<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Inject</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">VelocityTest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProxyServer</span> server<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Logger</span> logger<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@DataDirectory</span> <span class=\"token class-name\">Path</span> dataDirectory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> server<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger <span class=\"token operator\">=</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataDirectory <span class=\"token operator\">=</span> dataDirectory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will get you a <code class=\"language-text\">java.nio.file.Path</code> of your plugin directory. If you absolutely need a <code class=\"language-text\">java.io.File</code>, you may use <code class=\"language-text\">Path#toFile()</code>. However, Velocity usually works with <code class=\"language-text\">Path</code>.</p>","frontmatter":{"title":""},"excerpt":"title: Velocity Plugin Basics Now you will lay the groundwork for your plugin. This page will teach you the first things to do when creating…"}},"pageContext":{"slug":"/developers/api-basics/"}}}