{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/developers/command-api/","result":{"data":{"markdownRemark":{"html":"<p>The Command API lets you create commands that can be executed by a player connected to the proxy or the console.</p>\n<h2>Creating a command</h2>\n<p>Each command class needs to implement a <code class=\"language-text\">Command</code> subinterface. The choice depends on the type of arguments and the granularity of suggestions provided to the client. These include:</p>\n<h3><code class=\"language-text\">BrigadierCommand</code></h3>\n<p>Internally, Velocity uses the <a href=\"https://github.com/Mojang/brigadier\">Brigadier</a> library to register and dispatch command actions. You can register your own <code class=\"language-text\">CommandNode</code>s by wrapping them in a <code class=\"language-text\">BrigadierCommand</code>. Let's see an example of a command that will tell whoever executes the command \"Hello World\" in light blue text.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>velocityplugin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mojang<span class=\"token punctuation\">.</span>brigadier<span class=\"token punctuation\">.</span>builder</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LiteralArgumentBuilder</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mojang<span class=\"token punctuation\">.</span>brigadier<span class=\"token punctuation\">.</span>tree</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LiteralCommandNode</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>command</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BrigadierCommand</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>command</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CommandSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>event</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Subscribe</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>proxy</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ProxyInitializeEvent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>plugin</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>kyori<span class=\"token punctuation\">.</span>adventure<span class=\"token punctuation\">.</span>text</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TextComponent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>kyori<span class=\"token punctuation\">.</span>adventure<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>format</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">NamedTextColor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Plugin</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"helloworld\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldPlugin</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createBrigadierCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">LiteralCommandNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CommandSource</span><span class=\"token punctuation\">></span></span> helloNode <span class=\"token operator\">=</span> <span class=\"token class-name\">LiteralArgumentBuilder</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CommandSource</span><span class=\"token punctuation\">></span></span><span class=\"token function\">literal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">executes</span><span class=\"token punctuation\">(</span>context <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">TextComponent</span> message <span class=\"token operator\">=</span> <span class=\"token class-name\">TextComponent</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamedTextColor</span><span class=\"token punctuation\">.</span>AQUA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                context<span class=\"token punctuation\">.</span><span class=\"token function\">getSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// indicates success</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// BrigadierCommand implements Command</span>\n        <span class=\"token class-name\">BrigadierCommand</span> command <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BrigadierCommand</span><span class=\"token punctuation\">(</span>helloNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Brigadier commands have full backwards-compatibility with 1.12.2 and lower versions.</p>\n<h3><code class=\"language-text\">SimpleCommand</code></h3>\n<p>Modelled after the convention popularized by Bukkit and BungeeCord, a <code class=\"language-text\">SimpleCommand</code> has three methods: one for when the command is executed, one to provide suggestions for tab completion, and one to check a <code class=\"language-text\">CommandSource</code> has permission to use the command. All methods receive a <code class=\"language-text\">SimpleCommand.Invocation</code> object, which contains the <code class=\"language-text\">CommandSource</code> that executed the command and the arguments as an array of strings. The previous example can also be implemented using this interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>velocityplugin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>command</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">CommandSource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>command</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SimpleCommand</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>kyori<span class=\"token punctuation\">.</span>adventure<span class=\"token punctuation\">.</span>text</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TextComponent</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>kyori<span class=\"token punctuation\">.</span>adventure<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>format</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">NamedTextColor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestCommand</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SimpleCommand</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CommandSource</span> source <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Get the arguments after the command alias</span>\n        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        source<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextComponent</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NamedTextColor</span><span class=\"token punctuation\">.</span>AQUA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's important to note <code class=\"language-text\">invocation.arguments()</code> doesn't include the command alias (e.g. <code class=\"language-text\">teleport</code> for <code class=\"language-text\">/teleport foo bar</code>). In the event that no arguments are specified, an empty array will be passed, rather than a null array.</p>\n<p>If a player or the console executes the following command: <code class=\"language-text\">/stats Player2 kills</code>, the first argument will be <code class=\"language-text\">Player2</code>, which we can access using <code class=\"language-text\">invocation.arguments()[0]</code> and the second argument will be <code class=\"language-text\">kills</code>.</p>\n<h3><code class=\"language-text\">RawCommand</code></h3>\n<p>There's certain cases where you don't need to process the arguments. These may include:</p>\n<ul>\n<li>A <code class=\"language-text\">/say</code> style command, where the arguments contain the message as a string; or</li>\n<li>You're using an external command framework to process your commands.</li>\n</ul>\n<p>A raw command indicates the proxy to pass the command alias and its arguments directly without further processing. Let's see an example of a command that echoes the received input:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>velocityplugin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>velocitypowered<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>command</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">RawCommand</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">net<span class=\"token punctuation\">.</span>kyori<span class=\"token punctuation\">.</span>adventure<span class=\"token punctuation\">.</span>text</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">TextComponent</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EchoCommand</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RawCommand</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Invocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        invocation<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextComponent</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">.</span><span class=\"token function\">arguments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Registering a command</h2>\n<p>Now that we have created a command, we need to register it in order for it to work. To register commands, you use the Command Manager. We get the command manager by executing <code class=\"language-text\">proxyServer.getCommandManager()</code> with the proxy instance, or by injecting it using the <code class=\"language-text\">@Inject</code> annotation in the main class. The register method requires two parameters, the command metadata and the command object.</p>\n<p>The <code class=\"language-text\">CommandMeta</code> contains the case-insensitive aliases and more advanced features. The Command Manager provides a meta builder via the <code class=\"language-text\">#metaBuilder(String alias)</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">CommandMeta</span> meta <span class=\"token operator\">=</span> commandManager<span class=\"token punctuation\">.</span><span class=\"token function\">metaBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// Specify other aliases (optional)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">aliases</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"otherAlias\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"anotherAlias\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally,</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">commandManager<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>meta<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you're registering a <code class=\"language-text\">BrigadierCommand</code>, you may prefer to use the <code class=\"language-text\">#register(BrigadierCommand)</code> method or <code class=\"language-text\">#metaBuilder(BrigadierCommand)</code> to specify additional aliases.</p>","frontmatter":{"title":"The Command API"},"excerpt":"The Command API lets you create commands that can be executed by a player connected to the proxy or the console. Creating a command Each…"}},"pageContext":{"slug":"/developers/command-api/"}}}