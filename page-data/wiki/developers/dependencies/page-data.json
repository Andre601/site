{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/developers/dependencies/","result":{"data":{"markdownRemark":{"html":"<hr>\n<h2>title: Dependency Management</h2>\n<p>Dependencies are common. You need to hook into another plugin. You don't want to write the same code\nsomeone else has already solved. Whatever you do, you need a way to manage your dependencies effectively.</p>\n<h3>Plugin dependencies</h3>\n<p>Adding a dependency on another plugin is done with the <code class=\"language-text\">@Plugin</code> annotation in your main class. Let's revisit that briefly:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Plugin</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"myfirstplugin\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"My Plugin\"</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Say we have a dependency on another plugin, call it <code class=\"language-text\">wonderplugin</code>. To add it as a dependency, do the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Plugin</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"myfirstplugin\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"My Plugin\"</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span> dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token annotation punctuation\">@Dependency</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"wonderplugin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The id of the dependency is the same as the other plugin's <code class=\"language-text\">id</code> from its <code class=\"language-text\">@Plugin</code> annotation. This is why having a stable plugin ID is important.</p>\n<p>That's it! Now, your plugin will require <em>wonderplugin</em> to load, and when it does, it will load <em>after</em> wonderplugin.</p>\n<p>To specify multiple dependencies, separate them by commas: <code class=\"language-text\">dependencies = {@Dependency(id = &quot;wonderplugin&quot;), @Dependency(id = &quot;otherplugin&quot;)}</code></p>\n<h3>Optional plugin dependencies</h3>\n<p>To make a dependency optional, add <code class=\"language-text\">optional = true</code>, like shown:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Plugin</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"myfirstplugin\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"My Plugin\"</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span> dependencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token annotation punctuation\">@Dependency</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token string\">\"wonderplugin\"</span><span class=\"token punctuation\">,</span> optional <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VelocityTest</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Your plugin will now load after wonderplugin, but it will not require it.</p>\n<h3>External dependencies</h3>\n<p>Dependencies on other libraries aren't handled by Velocity. You will need to add them using your build system. Please remember\nto relocate any dependencies you shade. Failure to relocate will lead to dependency conflicts with other plugins.</p>\n<p>If your plugin does not shade its dependencies, but rather attaches them from a directory, you may use the PluginManager's\n<code class=\"language-text\">addToClasspath</code> method instead of using reflection to access the ClassLoader.</p>","frontmatter":{"title":""},"excerpt":"title: Dependency Management Dependencies are common. You need to hook into another plugin. You don't want to write the same code\nsomeoneâ€¦"}},"pageContext":{"slug":"/developers/dependencies/"}}}