{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/users/getting-started/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Getting Started\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This page covers how to install and set up a minimal configuration of Velocity.\"), mdx(\"h2\", null, \"Installing Java\"), mdx(\"p\", null, \"Velocity is written in Java, so if you do not already have Java installed, you\\nwill need to install it before you continue. Velocity requires Java 8 or newer.\"), mdx(\"p\", null, \"We recommend using the HotSpot-based Java 11 builds from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adoptopenjdk.net/\"\n  }), \"AdoptOpenJDK\"), \".\"), mdx(\"h2\", null, \"Downloading Velocity\"), mdx(\"p\", null, \"Head over to the \", mdx(Link, {\n    to: \"/downloads\",\n    mdxType: \"Link\"\n  }, \"downloads\"), \" page to get the latest version of Velocity.\"), mdx(\"h2\", null, \"Launching Velocity for the first time\"), mdx(\"p\", null, \"Once you have downloaded Velocity, we will launch it for the first time to generate the\\nconfiguration file, \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"velocity.toml\"), \". You can use the start script created to launch Velocity\\nonce you're done configuring Velocity.\"), mdx(\"h3\", null, \"Launching Velocity under Windows\"), mdx(\"p\", null, \"Create a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"start.bat\"), \" with the following contents in the same directory where you intend\\nto place the proxy files.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"batch\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-batch\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-batch\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"@\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"echo\"), \" off\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"java\"), \" -Xms512M -Xmx512M -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -jar velocity.jar\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token keyword\"\n  }), \"pause\"))))), mdx(\"p\", null, \"Once saved, double-check the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"start.bat\"), \" file. If it worked, you should now receive a\\nconsole.\"), mdx(\"h3\", null, \"Launching Velocity under macOS or Linux\"), mdx(\"p\", null, \"Create a \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"start.sh\"), \" with the following contents in the same directory where you intend\\nto place the proxy files. (You may do this using a file transfer client, or using a text\\neditor running on the machine.)\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token shebang important\"\n  }), \"#!/bin/sh\"), \"\\n\\njava -Xms1G -Xmx1G -XX:+UseG1GC -XX:G1HeapRegionSize\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), \"4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token number\"\n  }), \"15\"), \" -jar velocity*.jar\"))), mdx(\"p\", null, \"Once saved, open a terminal (or log into the machine) if you haven't already, navigate to the\\ndirectory where you have placed the Velocity JAR file and the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"start.sh\"), \" file. Then run\\n\", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"chmod +x start.sh\"), \" and then \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"./start.sh\"), \". If it worked, you should now receive a proxy console.\"), mdx(\"h2\", null, \"After launch\"), mdx(\"p\", null, \"Here's a sample of what you'll see once we've started the proxy:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plain\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-plain\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-plain\"\n  }), \"[12:04:59 INFO]: Booting up Velocity <unknown>...\\n[12:04:59 INFO]: Connections will use epoll channels, libdeflate (Linux x86_64) compression, OpenSSL 1.1.x (Linux x86_64) ciphers\\n[12:04:59 INFO]: Loading plugins...\\n[12:04:59 INFO]: Loaded 0 plugins\\n[12:04:59 INFO]: Listening on /0:0:0:0:0:0:0:0%0:25577\\n[12:04:59 INFO]: Done (0.48s)!\"))), mdx(\"p\", null, \"In essence, we've now launched Velocity and are ready to set it up our \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"velocity.toml\"), \".\\nIt is now time to modify the configuration and properly set up your servers.\"), mdx(\"p\", null, \"Go ahead and type \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"end\"), \" at the console and press enter. The proxy shuts down:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plain\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-plain\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-plain\"\n  }), \"> end\\n[12:05:02 INFO]: Shutting down the proxy...\\n[12:05:02 INFO]: Closing endpoint /0:0:0:0:0:0:0:0%0:25577\"))), mdx(\"h3\", null, \"Configuring your servers\"), mdx(\"p\", null, \"We now need to configure each server to accept connections from the proxy.\"), mdx(\"p\", null, \"Velocity is a highly configurable proxy. While most users will not need to change everything in the config, there\\nare tons of options covered \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/users/configuration/\"\n  }), \"here\"), \" along with an explanation\\non how each option works. To get started, simply open your \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"velocity.toml\"), \" and search for the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[servers]\"), \" section.\\nHere is where you will begin adding your servers to Velocity, allowing them to be seen by Velocity.\"), mdx(\"p\", null, \"Here's a sample of what the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"[servers]\"), \" section should look like initially.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plain\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-plain\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-plain\"\n  }), \"[servers]\\nlobby = \\\"127.0.0.1:30066\\nfactions = \\\"127.0.0.1:30067\\\"\\nminigames = \\\"127.0.0.1:30068\\\"\"))), mdx(\"p\", null, \"Go ahead and put your servers in this file, and then restart Velocity. Once you've done that, you will need to open\\nthe \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"server.properties\"), \" file for each of your servers and set the \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"online-mode\"), \" setting to \", mdx(\"code\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"false\"), \". This allows\\nVelocity to connect to your server. Once you're done, restart your server. Velocity should now be ready for use.\"), mdx(\"p\", null, \"This is a minimal setup. Since we're not forwarding IPs and player information, the Minecraft server will\\nassume you connected from offline mode and will use a different UUID and display only the default Steve and Alex\\nskins. However, Velocity can forward this information onto your Minecraft servers with some extra configuration. See\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/wiki/users/forwarding\"\n  }), \"Configuring player information forwarding\"), \" to learn how to\\nconfigure this feature.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Getting Started"},"excerpt":"This page covers how to install and set up a minimal configuration of Velocity. Installing Java Velocity is written in Java, so if you do…"}},"pageContext":{"slug":"/users/getting-started/"}},"staticQueryHashes":["63159454"]}